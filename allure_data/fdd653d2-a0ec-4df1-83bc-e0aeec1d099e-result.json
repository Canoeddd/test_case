{"name": "test_coupon_des", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.InvalidArgumentException: Message: invalid argument: invalid 'id'\n  (Session info: chrome=123.0.6312.106)\nStacktrace:\n\tGetHandleVerifier [0x00007FF71BD070C2+63090]\n\t(No symbol) [0x00007FF71BC72D12]\n\t(No symbol) [0x00007FF71BB0EC65]\n\t(No symbol) [0x00007FF71BB9565E]\n\t(No symbol) [0x00007FF71BB76FDA]\n\t(No symbol) [0x00007FF71BB93412]\n\t(No symbol) [0x00007FF71BB76D83]\n\t(No symbol) [0x00007FF71BB483A8]\n\t(No symbol) [0x00007FF71BB49441]\n\tGetHandleVerifier [0x00007FF71C10262D+4238301]\n\tGetHandleVerifier [0x00007FF71C13F78D+4488509]\n\tGetHandleVerifier [0x00007FF71C137A6F+4456479]\n\tGetHandleVerifier [0x00007FF71BDE0606+953270]\n\t(No symbol) [0x00007FF71BC7E5DF]\n\t(No symbol) [0x00007FF71BC792B4]\n\t(No symbol) [0x00007FF71BC793EB]\n\t(No symbol) [0x00007FF71BC69C24]\n\tBaseThreadInitThunk [0x00007FFA1648257D+29]\n\tRtlUserThreadStart [0x00007FFA17CCAA58+40]", "trace": "self = <py_page.base_p.BasePage object at 0x0000017BEBA76690>\n\n    def ad_close(self):                          # 关闭广告\n        current_url = self.driver.current_url\n        print(current_url)\n        if \"#google_vignette\" in current_url:\n            time.sleep(1)\n            try:\n                # iframes = self.finds(By.TAG_NAME, \"iframe\")\n                iframe = self.find(By.XPATH, \"/html/ins/div/iframe\")\n    \n                WebDriverWait(self.driver, 3).until(EC.frame_to_be_available_and_switch_to_it(self.driver.switch_to.frame(iframe)))\n                # self.find(by_method, '//div[@aria-label=\"Close ad\"]').click()\n>               WebDriverWait(self.driver, 3).until(EC.frame_to_be_available_and_switch_to_it(self.find(by_method, '//div[@id=\"dismiss-button\"]')))\n\npy_page\\base_p.py:68: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npy_page\\base_p.py:35: in find\n    ele_find = self.driver.find_element(by, locator)# 定位单个元素\nC:\\Users\\Dell\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:741: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\nC:\\Users\\Dell\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000017BEBA74AA0>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such element\",\"message\":\"no such element: Unable to locate element: {\\...07FF71BC69C24]\\\\n\\\\tBaseThreadInitThunk [0x00007FFA1648257D+29]\\\\n\\\\tRtlUserThreadStart [0x00007FFA17CCAA58+40]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"xpath\",\"selector\":\"//div[@id=\"dismiss-button\"]\"}\nE         (Session info: chrome=123.0.6312.106); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF71BD070C2+63090]\nE       \t(No symbol) [0x00007FF71BC72D12]\nE       \t(No symbol) [0x00007FF71BB0EC65]\nE       \t(No symbol) [0x00007FF71BB5499D]\nE       \t(No symbol) [0x00007FF71BB54ADC]\nE       \t(No symbol) [0x00007FF71BB95B37]\nE       \t(No symbol) [0x00007FF71BB7701F]\nE       \t(No symbol) [0x00007FF71BB93412]\nE       \t(No symbol) [0x00007FF71BB76D83]\nE       \t(No symbol) [0x00007FF71BB483A8]\nE       \t(No symbol) [0x00007FF71BB49441]\nE       \tGetHandleVerifier [0x00007FF71C10262D+4238301]\nE       \tGetHandleVerifier [0x00007FF71C13F78D+4488509]\nE       \tGetHandleVerifier [0x00007FF71C137A6F+4456479]\nE       \tGetHandleVerifier [0x00007FF71BDE0606+953270]\nE       \t(No symbol) [0x00007FF71BC7E5DF]\nE       \t(No symbol) [0x00007FF71BC792B4]\nE       \t(No symbol) [0x00007FF71BC793EB]\nE       \t(No symbol) [0x00007FF71BC69C24]\nE       \tBaseThreadInitThunk [0x00007FFA1648257D+29]\nE       \tRtlUserThreadStart [0x00007FFA17CCAA58+40]\n\nC:\\Users\\Dell\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: NoSuchElementException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_case.test_webs.TestWebs object at 0x0000017BEBA15250>\n\n    def test_coupon_des(self):\n        log_file_path = r'..\\log\\站群.txt'\n        store_detail = TemuWebs()\n        c1 = store_detail.first_des()\n        c2 = store_detail.sec_des()\n        print(c1)\n        print(c2)\n        try:\n            print(\"【判断coupon的描述】\", \"*-*\" * 66)\n            assert c1 == des1 and c2 == des2, f\"WA0301-webs 前两张coupon的描述内容错误\"    #  coupon描述断言\n    \n            get_deal_webs = store_detail.link_ele()\n            print(get_deal_webs)\n            assert get_deal_webs == link_webs, f\"WA0301-webs get deal的affi-Link链接错误\"   #  get deal的affi-Link断言\n    \n>           affi_code1 = store_detail.first_code()\n\ntest_case\\test_webs.py:23: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npy_page\\temu_p_webs.py:38: in first_code\n    self.webs_temu.ad_close()\npy_page\\base_p.py:95: in ad_close\n    raise e\npy_page\\base_p.py:83: in ad_close\n    self.driver.switch_to.frame(iframe2)\nC:\\Users\\Dell\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\switch_to.py:95: in frame\n    self._driver.execute(Command.SWITCH_TO_FRAME, {\"id\": frame_reference})\nC:\\Users\\Dell\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000017BEBA74AA0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"invalid argument\",\"message\":\"invalid argument: invalid \\'id\\'\\\\n  (Sessio...07FF71BC69C24]\\\\n\\\\tBaseThreadInitThunk [0x00007FFA1648257D+29]\\\\n\\\\tRtlUserThreadStart [0x00007FFA17CCAA58+40]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidArgumentException: Message: invalid argument: invalid 'id'\nE         (Session info: chrome=123.0.6312.106)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF71BD070C2+63090]\nE       \t(No symbol) [0x00007FF71BC72D12]\nE       \t(No symbol) [0x00007FF71BB0EC65]\nE       \t(No symbol) [0x00007FF71BB9565E]\nE       \t(No symbol) [0x00007FF71BB76FDA]\nE       \t(No symbol) [0x00007FF71BB93412]\nE       \t(No symbol) [0x00007FF71BB76D83]\nE       \t(No symbol) [0x00007FF71BB483A8]\nE       \t(No symbol) [0x00007FF71BB49441]\nE       \tGetHandleVerifier [0x00007FF71C10262D+4238301]\nE       \tGetHandleVerifier [0x00007FF71C13F78D+4488509]\nE       \tGetHandleVerifier [0x00007FF71C137A6F+4456479]\nE       \tGetHandleVerifier [0x00007FF71BDE0606+953270]\nE       \t(No symbol) [0x00007FF71BC7E5DF]\nE       \t(No symbol) [0x00007FF71BC792B4]\nE       \t(No symbol) [0x00007FF71BC793EB]\nE       \t(No symbol) [0x00007FF71BC69C24]\nE       \tBaseThreadInitThunk [0x00007FFA1648257D+29]\nE       \tRtlUserThreadStart [0x00007FFA17CCAA58+40]\n\nC:\\Users\\Dell\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: InvalidArgumentException"}, "start": 1712666301591, "stop": 1712666373359, "uuid": "0b0493d2-8b72-4194-a799-1e5079233729", "historyId": "c73ce0823350d51ff9b3d872a4ec44b5", "testCaseId": "c73ce0823350d51ff9b3d872a4ec44b5", "fullName": "test_case.test_webs.TestWebs#test_coupon_des", "labels": [{"name": "parentSuite", "value": "test_case"}, {"name": "suite", "value": "test_webs"}, {"name": "subSuite", "value": "TestWebs"}, {"name": "host", "value": "DESKTOP-LPVFBLF"}, {"name": "thread", "value": "26008-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_case.test_webs"}]}